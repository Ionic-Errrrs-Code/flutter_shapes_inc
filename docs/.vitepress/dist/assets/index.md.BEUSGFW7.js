import{_ as e,c as a,o as s,ag as n}from"./chunks/framework.T06Zws2o.js";const l=JSON.parse('{"title":"Flutter Shapes Inc","description":"Lightweight, developer-friendly package for Shapes Inc AI integration","frontmatter":{"title":"Flutter Shapes Inc","description":"Lightweight, developer-friendly package for Shapes Inc AI integration","head":[["meta",{"name":"description","content":"Flutter Shapes Inc - A lightweight, developer-friendly package for integrating with Shapes Inc AI chat bots"}],["meta",{"name":"keywords","content":"flutter, shapes, ai, chat, multimodal"}],["meta",{"property":"og:title","content":"Flutter Shapes Inc - Simple API for Shapes Inc"}],["meta",{"property":"og:description","content":"Function-based API, multimodal (text/image/audio), shape profiles, and utilities."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:url","content":"https://flutter_shapes.ionicerrrrscode.com"}]]},"headers":[],"relativePath":"index.md","filePath":"index.md"}');const o=e({name:"index.md"},[["render",function(e,l,o,t,p,r){return s(),a("div",null,[...l[0]||(l[0]=[n('<h1 id="flutter-shapes-inc" tabindex="-1">Flutter Shapes Inc <a class="header-anchor" href="#flutter-shapes-inc" aria-label="Permalink to &quot;Flutter Shapes Inc&quot;">​</a></h1><p>A lightweight, function-based Flutter package for integrating with Shapes Inc agents. No widget boilerplate — just initialize once and call simple functions for chat, multimodal, and utilities.</p><blockquote><p><strong>First Release</strong>: This is the initial release of Flutter Shapes Inc, providing a complete set of functions for integrating with Shapes Inc AI services.</p></blockquote><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#C3E88D;"> &#39;package:flutter_shapes_inc/flutter_shapes_inc.dart&#39;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">void</span><span style="color:#82AAFF;"> main</span><span style="color:#BABED8;">() {</span></span>\n<span class="line"><span style="color:#FFCB6B;">  ShapesAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">initialize</span><span style="color:#BABED8;">(</span></span>\n<span class="line"><span style="color:#C3E88D;">    &#39;your-api-key&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#BABED8;">    userId</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> &#39;your-app-user-id&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">     // X-User-Id (recommended)</span></span>\n<span class="line"><span style="color:#BABED8;">    channelId</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> &#39;conversation-1234&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> // X-Channel-Id (recommended)</span></span>\n<span class="line"><span style="color:#BABED8;">  )</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#FFCB6B;">Future</span><span style="color:#BABED8;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#BABED8;">&gt; </span><span style="color:#82AAFF;">chat</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#BABED8;"> {</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#BABED8;"> reply </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#FFCB6B;"> ShapesAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendMessage</span><span style="color:#BABED8;">(</span><span style="color:#C3E88D;">&#39;tenshi&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> &#39;Hello!&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#82AAFF;">  debugPrint</span><span style="color:#BABED8;">(reply)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="core-concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#core-concepts" aria-label="Permalink to &quot;Core Concepts&quot;">​</a></h2><ul><li>Initialization: one-time <code>ShapesAPI.initialize(apiKey, userId?, channelId?, baseUrl?)</code></li><li>Model format: <code>shapesinc/&lt;username&gt;</code> (handled internally)</li><li>Public profiles: <code>getShapeProfile(username)</code> fetches <code>https://api.shapes.inc/shapes/public/{username}</code></li><li>Multimodal: send text with image or audio URLs; <code>!imagine</code> via <code>generateImage</code></li></ul><h2 id="complete-function-list" tabindex="-1">Complete Function List <a class="header-anchor" href="#complete-function-list" aria-label="Permalink to &quot;Complete Function List&quot;">​</a></h2><h3 id="chat-multimodal" tabindex="-1">Chat &amp; Multimodal <a class="header-anchor" href="#chat-multimodal" aria-label="Permalink to &quot;Chat &amp; Multimodal&quot;">​</a></h3><ul><li><code>sendMessage(shapeUsername, message)</code></li><li><code>sendImageMessage(shapeUsername, message, imageUrl)</code></li><li><code>sendAudioMessage(shapeUsername, message, audioUrl)</code></li><li><code>sendMultiImageMessage(shapeUsername, message, imageUrls)</code></li><li><code>sendImageAudioMessage(shapeUsername, message, imageUrl, audioUrl)</code></li><li><code>createChatCompletion(shapeUsername, List&lt;ShapesMessage&gt;)</code></li><li><code>quickChat(shapeUsername, message)</code></li></ul><h3 id="shape-profiles-discovery" tabindex="-1">Shape Profiles &amp; Discovery <a class="header-anchor" href="#shape-profiles-discovery" aria-label="Permalink to &quot;Shape Profiles &amp; Discovery&quot;">​</a></h3><ul><li><code>getShapeProfile(username)</code></li><li><code>getShapeProfiles(List&lt;String&gt; usernames)</code></li><li><code>getPopularShapes({limit = 20})</code></li></ul><h3 id="shape-commands" tabindex="-1">Shape Commands <a class="header-anchor" href="#shape-commands" aria-label="Permalink to &quot;Shape Commands&quot;">​</a></h3><ul><li><code>resetShape(shapeUsername)</code></li><li><code>getShapeInfo(shapeUsername)</code></li><li><code>getHelp(shapeUsername)</code></li><li><code>searchWeb(shapeUsername, query)</code></li><li><code>generateImage(shapeUsername, prompt)</code> - Multimodal response support</li></ul><h3 id="helper-functions" tabindex="-1">Helper Functions <a class="header-anchor" href="#helper-functions" aria-label="Permalink to &quot;Helper Functions&quot;">​</a></h3><ul><li><code>extractImageUrls(response)</code> - Extract image URLs from multimodal responses</li><li><code>extractTextContent(response)</code> - Extract text content from multimodal responses</li></ul><h3 id="information-data" tabindex="-1">Information &amp; Data <a class="header-anchor" href="#information-data" aria-label="Permalink to &quot;Information &amp; Data&quot;">​</a></h3><ul><li><code>getWeather(shapeUsername, location)</code></li><li><code>getCurrentTime(shapeUsername, [timezone])</code></li><li><code>getNews(shapeUsername, [topic])</code></li><li><code>getStockInfo(shapeUsername, symbol)</code></li><li><code>getCryptoInfo(shapeUsername, symbol)</code></li></ul><h3 id="language-translation" tabindex="-1">Language &amp; Translation <a class="header-anchor" href="#language-translation" aria-label="Permalink to &quot;Language &amp; Translation&quot;">​</a></h3><ul><li><code>translate(shapeUsername, text, targetLanguage)</code></li><li><code>define(shapeUsername, word)</code></li><li><code>getSynonyms(shapeUsername, word)</code></li><li><code>getAntonyms(shapeUsername, word)</code></li></ul><h3 id="math-conversion" tabindex="-1">Math &amp; Conversion <a class="header-anchor" href="#math-conversion" aria-label="Permalink to &quot;Math &amp; Conversion&quot;">​</a></h3><ul><li><code>calculate(shapeUsername, expression)</code></li><li><code>convert(shapeUsername, value, fromUnit, toUnit)</code></li></ul><h3 id="media-entertainment" tabindex="-1">Media &amp; Entertainment <a class="header-anchor" href="#media-entertainment" aria-label="Permalink to &quot;Media &amp; Entertainment&quot;">​</a></h3><ul><li><code>getMovieInfo(shapeUsername, title)</code></li><li><code>getBookInfo(shapeUsername, title)</code></li><li><code>getSongInfo(shapeUsername, title)</code></li><li><code>getGameInfo(shapeUsername, title)</code></li><li><code>getJoke(shapeUsername, [category])</code></li><li><code>getQuote(shapeUsername, [author])</code></li><li><code>getFact(shapeUsername, [topic])</code></li><li><code>getTrivia(shapeUsername, [category])</code></li></ul><h3 id="lifestyle-learning" tabindex="-1">Lifestyle &amp; Learning <a class="header-anchor" href="#lifestyle-learning" aria-label="Permalink to &quot;Lifestyle &amp; Learning&quot;">​</a></h3><ul><li><code>getRecipe(shapeUsername, dish)</code></li><li><code>getWorkout(shapeUsername, [goal])</code></li><li><code>getMeditation(shapeUsername, [type])</code></li><li><code>learnLanguage(shapeUsername, language, phrase)</code></li><li><code>getCodingHelp(shapeUsername, language, problem)</code></li><li><code>getDebuggingHelp(shapeUsername, error)</code></li><li><code>getCodeReview(shapeUsername, code)</code></li><li><code>explainAlgorithm(shapeUsername, algorithm)</code></li><li><code>getDesignFeedback(shapeUsername, description)</code></li><li><code>getWritingHelp(shapeUsername, text, [type])</code></li><li><code>checkGrammar(shapeUsername, text)</code></li><li><code>getWritingSuggestions(shapeUsername, text)</code></li></ul><h3 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h3><ul><li><code>testConnection()</code></li><li><code>getUsageStats()</code></li></ul><h2 id="image-generation" tabindex="-1">Image Generation <a class="header-anchor" href="#image-generation" aria-label="Permalink to &quot;Image Generation&quot;">​</a></h2><p>The <code>generateImage()</code> function provides support for multimodal responses:</p><h3 id="smart-response-parsing" tabindex="-1">Smart Response Parsing <a class="header-anchor" href="#smart-response-parsing" aria-label="Permalink to &quot;Smart Response Parsing&quot;">​</a></h3><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Generate an image</span></span>\n<span class="line"><span style="color:#C792EA;">final</span><span style="color:#BABED8;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#FFCB6B;"> ShapesAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generateImage</span><span style="color:#BABED8;">(</span><span style="color:#C3E88D;">&#39;tenshi&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> &#39;a beautiful cat&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Extract components</span></span>\n<span class="line"><span style="color:#C792EA;">final</span><span style="color:#BABED8;"> imageUrls </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> ShapesAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extractImageUrls</span><span style="color:#BABED8;">(response)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">final</span><span style="color:#BABED8;"> textContent </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> ShapesAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extractTextContent</span><span style="color:#BABED8;">(response)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Use in your UI</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (imageUrls</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">isNotEmpty) {</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  // Display the first image</span></span>\n<span class="line"><span style="color:#FFCB6B;">  Image</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">network</span><span style="color:#BABED8;">(imageUrls</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">first)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  // Show the text response</span></span>\n<span class="line"><span style="color:#FFCB6B;">  Text</span><span style="color:#BABED8;">(textContent)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="response-format" tabindex="-1">Response Format <a class="header-anchor" href="#response-format" aria-label="Permalink to &quot;Response Format&quot;">​</a></h3><p>The API returns responses in this format:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>Here&#39;s your generated image description!</span></span>\n<span class="line"><span>https://files.shapes.inc/f4098070.png</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="helper-functions-1" tabindex="-1">Helper Functions <a class="header-anchor" href="#helper-functions-1" aria-label="Permalink to &quot;Helper Functions&quot;">​</a></h3><ul><li><strong><code>extractImageUrls(response)</code></strong>: Extracts all image URLs from the response</li><li><strong><code>extractTextContent(response)</code></strong>: Extracts just the text content, excluding URLs</li></ul><h3 id="multiple-images" tabindex="-1">Multiple Images <a class="header-anchor" href="#multiple-images" aria-label="Permalink to &quot;Multiple Images&quot;">​</a></h3><p>When multiple images are generated, they&#39;re returned as separate URLs on new lines, making it easy to display them in sequence.</p><h2 id="models-for-advanced-usage" tabindex="-1">Models (for advanced usage) <a class="header-anchor" href="#models-for-advanced-usage" aria-label="Permalink to &quot;Models (for advanced usage)&quot;">​</a></h2><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Message models</span></span>\n<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#FFCB6B;"> ShapesMessage</span><span style="color:#BABED8;"> {</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> role</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">         // &#39;user&#39; | &#39;assistant&#39; | &#39;system&#39;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> dynamic</span><span style="color:#BABED8;"> content</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     // String | List&lt;ContentPart&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#FFCB6B;"> ContentPart</span><span style="color:#BABED8;"> {</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> type</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">         // &#39;text&#39; | &#39;image_url&#39; | &#39;audio_url&#39;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> text</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> ImageUrl</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> imageUrl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // ImageUrl(url)</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> AudioUrl</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> audioUrl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // AudioUrl(url)</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#FFCB6B;"> ShapeProfile</span><span style="color:#BABED8;"> {</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> username</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> String</span><span style="color:#BABED8;"> avatarUrl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    // falls back to avatar or empty</span></span>\n<span class="line"><span style="color:#C792EA;">  final</span><span style="color:#FFCB6B;"> bool</span><span style="color:#BABED8;"> enabled</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  // plus: searchDescription, tags, screenshots, settings, stats</span></span>\n<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="public-profiles-http-reference" tabindex="-1">Public Profiles (HTTP reference) <a class="header-anchor" href="#public-profiles-http-reference" aria-label="Permalink to &quot;Public Profiles (HTTP reference)&quot;">​</a></h2><ul><li>Endpoint: <code>GET https://api.shapes.inc/shapes/public/{username}</code></li><li>No auth required</li><li>Used internally by <code>getShapeProfile</code></li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Always normalize usernames (strip leading <code>@</code>) before sending</li><li>Provide <code>userId</code> and <code>channelId</code> in <code>initialize</code> for user-facing apps</li><li>On web, use valid https URLs for images/audio; the example includes safe fallbacks</li></ul><h2 id="example-app-material-3" tabindex="-1">Example App (Material 3) <a class="header-anchor" href="#example-app-material-3" aria-label="Permalink to &quot;Example App (Material 3)&quot;">​</a></h2><p>The <code>example/</code> app demonstrates:</p><ul><li>Segmented composer for text, image, audio, and <code>!imagine</code></li><li>Shape search and selection using public profiles</li><li>Responsive layout with SingleChildScrollView</li><li>Safe avatar rendering with initials fallback</li></ul><p>Run:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#C3E88D;"> ../example</span></span>\n<span class="line"><span style="color:#FFCB6B;">flutter</span><span style="color:#C3E88D;"> pub</span><span style="color:#C3E88D;"> get</span></span>\n<span class="line"><span style="color:#FFCB6B;">flutter</span><span style="color:#C3E88D;"> run</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="📚-documentation" tabindex="-1">📚 Documentation <a class="header-anchor" href="#📚-documentation" aria-label="Permalink to &quot;📚 Documentation&quot;">​</a></h2><ul><li><strong>📖 <a href="https://flutter_shapes.ionicerrrrscode.com" target="_blank" rel="noreferrer">Full Documentation</a></strong> - Complete API reference</li><li><strong>🎯 <a href="https://github.com/Ionic-Errrrs-Code/flutter_shapes/tree/main/example" target="_blank" rel="noreferrer">Examples</a></strong> - Working example app with Material 3</li><li><strong>🔧 <a href="https://flutter_shapes.ionicerrrrscode.com/#/" target="_blank" rel="noreferrer">API Reference</a></strong> - Detailed function documentation</li></ul>',52)])])}]]);export{l as __pageData,o as default};
